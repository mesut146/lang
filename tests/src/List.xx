class List<T>{
  arr: T*;
  count: int;
  cap: int;

  static func new(): List<T>*{
    return new List<T>{arr: malloc<T>(10), count: 0, cap: 10};
  } 

  func expand(max: int){
    if(arr.length < max){
      let tmp = new T[max];
      Array.copy(arr, 0, tmp, 0, count);
      arr = tmp;
    }
  }

  func add(e: T){
    expand(count + 1);
    arr[count] = e;
    ++count;
  }

  func add(list: List<T>){
    let i = 0;
    while(i < list.count){
        add(list.get(i));
        ++i;
    }
  }

  func get(pos: int): T{
    if(pos >= count) panic("index out of bounds");
    return arr[pos];
  }

  func clear(){
    //todo dealloc
    count = 0;
  }

  func size(): int{
    return count;
  }

  func indexOf(e: T): int{
    let i = 0;
    while(i < count){
      if(arr[i] == e) return i;
      ++i;
    }
    return -1;
  }

  /*func filter(f: func<bool>(T)): List<T>{
    let res = List<T>();
    for(let e : this){
      if(f(e)) res.add(e);
    }
    return res;
  }

  func map<R>(f: func<R>(T)): List<R>{
    let res = List<R>{arr: T[count], count: 0};
    for(let e : this){
      res.add(f(e));
    }
    return res;
  }
  */
}